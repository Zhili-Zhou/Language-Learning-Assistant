{"ast":null,"code":"export const askAssistant = async message => {\n  const response = await fetch(\"http://127.0.0.1:5000/ask\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message\n    }) // 将用户输入发送给 Flask 后端\n  });\n  return await response.json();\n};\nexport const fetchWordData = async word => {\n  const response = await fetch(\"http://127.0.0.1:5000/vocabulary\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      word\n    }) // Send the word to fetch definitions and examples\n  });\n  if (!response.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n  const data = await response.json();\n\n  // Assuming the API returns an object with word details\n  return {\n    word: data.word,\n    definition: data.definition,\n    example: data.example || \"No example available.\" // Handle cases where there is no example\n  };\n};","map":{"version":3,"names":["askAssistant","message","response","fetch","method","headers","body","JSON","stringify","json","fetchWordData","word","ok","Error","data","definition","example"],"sources":["C:/Users/rinsa/language-learning-assistant/web-interface/src/api.js"],"sourcesContent":["export const askAssistant = async (message) => {\r\n  const response = await fetch(\"http://127.0.0.1:5000/ask\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ message }), // 将用户输入发送给 Flask 后端\r\n  });\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const fetchWordData = async (word) => {\r\n  const response = await fetch(\"http://127.0.0.1:5000/vocabulary\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ word }), // Send the word to fetch definitions and examples\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Network response was not ok\");\r\n  }\r\n\r\n  const data = await response.json();\r\n\r\n  // Assuming the API returns an object with word details\r\n  return {\r\n    word: data.word,\r\n    definition: data.definition,\r\n    example: data.example || \"No example available.\", // Handle cases where there is no example\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,EAAE;IACxDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAQ,CAAC,CAAC,CAAE;EACrC,CAAC,CAAC;EAEF,OAAO,MAAMC,QAAQ,CAACO,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EAC3C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;IAC/DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEG;IAAK,CAAC,CAAC,CAAE;EAClC,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACO,IAAI,CAAC,CAAC;;EAElC;EACA,OAAO;IACLE,IAAI,EAAEG,IAAI,CAACH,IAAI;IACfI,UAAU,EAAED,IAAI,CAACC,UAAU;IAC3BC,OAAO,EAAEF,IAAI,CAACE,OAAO,IAAI,uBAAuB,CAAE;EACpD,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}